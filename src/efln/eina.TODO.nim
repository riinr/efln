#define EINA_ACCESSOR_FOREACH(accessor, counter, data)
#define EINA_ARRAY_ITER_NEXT(array, index, item, iterator)
#define EINA_BENCHMARK(function) ((Eina_Benchmark_Specimens)function)
#define EINA_BT(file)
#define EINA_CLIST_ENTRY(elem, type, field)
#define EINA_CLIST_FOR_EACH(cursor,list)
#define EINA_CLIST_FOR_EACH_ENTRY(elem, list, type, field)
#define EINA_CLIST_FOR_EACH_ENTRY_REV(elem, list, type, field)
#define EINA_CLIST_FOR_EACH_ENTRY_SAFE(cursor, cursor2, list, type, field)
#define EINA_CLIST_FOR_EACH_ENTRY_SAFE_REV(cursor, cursor2, list, type, field)
#define EINA_CLIST_FOR_EACH_REV(cursor,list)
#define EINA_CLIST_FOR_EACH_SAFE(cursor, cursor2, list)
#define EINA_CLIST_FOR_EACH_SAFE_REV(cursor, cursor2, list)
#define EINA_CLIST_INIT(list)  { &(list), &(list) }
#define EINA_COMPARE_CB(function) ((Eina_Compare_Cb)function)
#define EINA_COW_WRITE_BEGIN(Cow, Read, Write_Type, Write)
#define EINA_COW_WRITE_END(Cow, Read, Write)
#define EINA_COW_WRITE_END_NOGC(Cow, Read, Write)
#define EINA_C_ARRAY_ACCESSOR_NEW(Array) eina_carray_length_accessor_new((void**) Array, sizeof (Array[0]), EINA_C_ARRAY_LENGTH(Array))
#define EINA_C_ARRAY_ACCESSOR_PTR_NEW(Array) eina_carray_length_ptr_accessor_new((void**) Array, sizeof (Array[0]), EINA_C_ARRAY_LENGTH(Array))
#define EINA_C_ARRAY_ITERATOR_NEW(Array) eina_carray_length_iterator_new((void**) Array, sizeof (Array[0]), EINA_C_ARRAY_LENGTH(Array))
#define EINA_C_ARRAY_LENGTH(arr) (sizeof(arr) / sizeof((arr)[0]))
#define EINA_DBL_EQ(a, b) (!!(fabs((double)(a) - (double)(b)) <= DBL_EPSILON))
#define EINA_DBL_NONZERO(a) (!!(fpclassify((double)(a)) != FP_ZERO))
#define EINA_DEBUG_OPCODES_ARRAY_DEFINE(Name, ...)
#define EINA_DEBUG_PRIVATE_H_
#define EINA_DOUBLE_EQUAL(x, y)
#define EINA_EACH_CB(Function) ((Eina_Each_Cb)Function)
#define EINA_ERROR_NO_ERROR ((Eina_Error)0)
#define EINA_F16P16_HALF (1 << 15)
#define EINA_F16P16_ONE (1 << 16)
#define EINA_FILE_DIR_LIST_CB(function) ((Eina_File_Dir_List_Cb)function)
#define EINA_FLT_EQ(a, b) (!!(fabsf((float)(a) - (float)(b)) <= FLT_EPSILON))
#define EINA_FLT_NONZERO(a) (!!(fpclassify((float)(a)) != FP_ZERO))
#define EINA_FREEQ_FREE(ptr) eina_freeq_ptr_main_add(ptr, NULL, sizeof(*(ptr)))
#define EINA_FREEQ_N_FREE(ptr, n) eina_freeq_ptr_main_add(ptr, NULL, sizeof(*(ptr)) * n)
#define EINA_FREE_CB(Function) ((Eina_Free_Cb)Function)
#define EINA_FUTURE_SENTINEL ((pointer )(culong)-1)
#define EINA_INARRAY_FOREACH(array, itr)
#define EINA_INARRAY_REVERSE_FOREACH(array, itr)
#define EINA_INLIST Eina_Inlist __in_list
#define EINA_INLIST_CONTAINER_GET(ptr,
#define EINA_INLIST_FOREACH(list, it)
#define EINA_INLIST_FOREACH_SAFE(list, list2, it)
#define EINA_INLIST_FREE(list, it)
#define EINA_INLIST_GET(Inlist)         (& ((Inlist)->__in_list))
#define EINA_INLIST_REVERSE_FOREACH(list, it)
#define EINA_INLIST_REVERSE_FOREACH_FROM(list, it)
#define EINA_ITERATOR_FOREACH(itr,
#define EINA_KEY_CMP(Function)    ((Eina_Key_Cmp)Function)
#define EINA_KEY_HASH(Function)   ((Eina_Key_Hash)Function)
#define EINA_KEY_LENGTH(Function) ((Eina_Key_Length)Function)
#define EINA_LALLOC_ALLOC(function) ((Eina_Lalloc_Alloc)function)
#define EINA_LALLOC_FREE(function)  ((Eina_Lalloc_Free)function)
#define EINA_LIST_FOREACH(list, l, _data)
#define EINA_LIST_FOREACH_SAFE(list, l, l_next, data)
#define EINA_LIST_FREE(list, data)
#define EINA_LIST_REVERSE_FOREACH(list, l, _data)
#define EINA_LIST_REVERSE_FOREACH_SAFE(list, l, l_prev, data)
#define EINA_LOG(DOM, LEVEL, fmt, ...)
#define EINA_LOG(DOM, LEVEL, fmt, ...)
#define EINA_LOG(DOM, LEVEL, fmt, ...)
#define EINA_LOG_CRIT(fmt, ...)
#define EINA_LOG_DBG(fmt, ...)
#define EINA_LOG_DOMAIN_DEFAULT EINA_LOG_DOMAIN_GLOBAL
#define EINA_LOG_DOM_CRIT(DOM, fmt, ...)
#define EINA_LOG_DOM_DBG(DOM, fmt, ...)
#define EINA_LOG_DOM_ERR(DOM, fmt, ...)
#define EINA_LOG_DOM_INFO(DOM, fmt, ...)
#define EINA_LOG_DOM_WARN(DOM, fmt, ...)
#define EINA_LOG_ERR(fmt, ...)
#define EINA_LOG_INFO(fmt, ...)
#define EINA_LOG_STATE_INIT _eina_log_state_init
#define EINA_LOG_STATE_SHUTDOWN _eina_log_state_shutdown
#define EINA_LOG_WARN(fmt, ...)
#define EINA_MAGIC
#define EINA_MAGIC Eina_Magic __magic;
#define EINA_MAGIC_CHECK(d, m)                        (1)
#define EINA_MAGIC_CHECK(d, m) (EINA_LIKELY((d) && ((d)->__magic == (m))))
#define EINA_MAGIC_FAIL(d, m)                         ((void)0)
#define EINA_MAGIC_FAIL(d, m)
#define EINA_MAGIC_NONE 0x1234fedc
#define EINA_MAGIC_SET(d, m)                          ((void)0)
#define EINA_MAGIC_SET(d, m)   (d)->__magic = (m)
#define EINA_MAIN_LOOP_CHECK_RETURN
#define EINA_MAIN_LOOP_CHECK_RETURN do {} while(0)
#define EINA_MAIN_LOOP_CHECK_RETURN_VAL(val)
#define EINA_MAIN_LOOP_CHECK_RETURN_VAL(val) do {} while(0)
#define EINA_MATRIX3_ARGS(m) (m)->xx, (m)->xy, (m)->xz,
#define EINA_MATRIX3_FORMAT "g %g %g | %g %g %g | %g %g %g"
#define EINA_MODULE_INIT(f) EXPORTAPI Eina_Module_Init __eina_module_init = &f
#define EINA_MODULE_SHUTDOWN(f) EXPORTAPI Eina_Module_Shutdown __eina_module_shutdown = &f
#define EINA_POSITION2D(x, y) ((Eina_Position2D) { (x), (y) })
#define EINA_POSITION2D_DISTANCE(a, b)
#define EINA_POSITION2D_EQ(a, b)
#define EINA_PROCESS_CB(Function) ((Eina_Process_Cb)Function)
#define EINA_RANDOM_CB(function) ((Eina_Random_Cb)function)
#define EINA_RANGE(start, length) ((Eina_Range) { (start), (length) })
#define EINA_RANGE_EMPTY() ((Eina_Range) EINA_RANGE_ZERO())
#define EINA_RANGE_EQ(a, b)
#define EINA_RANGE_FROM_TO(from, to) ((Eina_Range) { MIN((from),(to)), ABS((to) - (from)) })
#define EINA_RANGE_ZERO() EINA_RANGE(0, 0)
#define EINA_RBTREE Eina_Rbtree __rbtree
#define EINA_RBTREE_CMP_KEY_CB(Function) ((Eina_Rbtree_Cmp_Key_Cb)Function)
#define EINA_RBTREE_CMP_NODE_CB(Function) ((Eina_Rbtree_Cmp_Node_Cb)Function)
#define EINA_RBTREE_CONTAINER_GET(Ptr, Type) ((Type *)((cstring )Ptr - offsetof(Type, __rbtree)))
#define EINA_RBTREE_FREE_CB(Function) ((Eina_Rbtree_Free_Cb)Function)
#define EINA_RBTREE_GET(Rbtree) (&((Rbtree)->__rbtree))
#define EINA_RECT(x, y, w, h) ((Eina_Rect) { { (x), (y), (w), (h) } })
#define EINA_RECTANGLE_ARGS(r) (r)->x, (r)->y, (r)->w, (r)->h
#define EINA_RECTANGLE_INIT { 0, 0, 0, 0}
#define EINA_RECTANGLE_SET(Rectangle, X, Y, W, H)
#define EINA_RECT_EMPTY() ((Eina_Rect) EINA_RECT_ZERO())
#define EINA_RECT_SET(rect, x, y, w, h) do { EINA_RECTANGLE_SET((&rect), x, y, w, h) } while (0)
#define EINA_RECT_ZERO() { EINA_RECTANGLE_INIT }
#define EINA_REFCOUNT_GET(Variable) (Variable)->__refcount
#define EINA_REFCOUNT_INIT(Variable) (Variable)->__refcount = 1
#define EINA_REFCOUNT_REF(Variable) (Variable)->__refcount++
#define EINA_REFCOUNT_UNREF(Variable)
#define EINA_RW_SLICE_DECLARE(name, length)
#define EINA_SAFETY_ERROR(msg) _eina_safety_error(__FILE__, __func__, __LINE__, msg)
#define EINA_SAFETY_ON_FALSE_GOTO(exp, label)
#define EINA_SAFETY_ON_FALSE_GOTO(exp, label)
#define EINA_SAFETY_ON_FALSE_RETURN(exp)
#define EINA_SAFETY_ON_FALSE_RETURN(exp)
#define EINA_SAFETY_ON_FALSE_RETURN_VAL(exp, val)
#define EINA_SAFETY_ON_FALSE_RETURN_VAL(exp, val)
#define EINA_SAFETY_ON_NULL_GOTO(exp, label)
#define EINA_SAFETY_ON_NULL_GOTO(exp, label)
#define EINA_SAFETY_ON_NULL_RETURN(exp)
#define EINA_SAFETY_ON_NULL_RETURN(exp)
#define EINA_SAFETY_ON_NULL_RETURN_VAL(exp, val)
#define EINA_SAFETY_ON_NULL_RETURN_VAL(exp, val)
#define EINA_SAFETY_ON_TRUE_GOTO(exp, label)
#define EINA_SAFETY_ON_TRUE_GOTO(exp, label)
#define EINA_SAFETY_ON_TRUE_RETURN(exp)
#define EINA_SAFETY_ON_TRUE_RETURN(exp)
#define EINA_SAFETY_ON_TRUE_RETURN_VAL(exp, val)
#define EINA_SAFETY_ON_TRUE_RETURN_VAL(exp, val)
#define EINA_SIZE2D(x, y) ((Eina_Size2D) { (x), (y) })
#define EINA_SIZE2D_EQ(a, b)
#define EINA_SLICE_ARRAY(buf) {((sizeof(buf) / sizeof((buf)[0])) * sizeof((buf)[0])), (buf)}
#define EINA_SLICE_ARRAY(buf) {.len = ((sizeof(buf) / sizeof((buf)[0])) * sizeof((buf)[0])), .mem = (buf)}
#define EINA_SLICE_FOREACH(s, itr)
#define EINA_SLICE_PRINT(s) (s).mem, (s).len
#define EINA_SLICE_STR(str) {.len = strlen((str)), .mem = (str)}
#define EINA_SLICE_STR(str) {strlen((str)), (str)}
#define EINA_SLICE_STR_FULL(str) {.len = strlen((str)) + 1, .mem = (str)}
#define EINA_SLICE_STR_FULL(str) {strlen((str)) + 1, (str)}
#define EINA_SLICE_STR_LITERAL(buf) {(sizeof("" buf) - 1), (buf)}
#define EINA_SLICE_STR_LITERAL(buf) {.len = (sizeof("" buf) - 1), .mem = (buf)}
#define EINA_SLICE_STR_PRINT(s) (int)(s).len, (cstring )(s).mem
#define EINA_THREAD_CLEANUP_POP(exec_cleanup)
#define EINA_THREAD_CLEANUP_PUSH(cleanup, data)
#define EINA_TRASH_CLEAN(trash, data) while ((data = eina_trash_pop(trash)))
#define EINA_VALUE_ARRAY_FOREACH(Array, Length, It, Value)
#define EINA_VALUE_BLOB_OPERATIONS_VERSION (1)
#define EINA_VALUE_STRUCT_DESC_DEFINE(Name, Ops, Size, ...)
#define EINA_VALUE_STRUCT_DESC_VERSION (1)
#define EINA_VALUE_STRUCT_MEMBER(eina_value_type, type, member)
#define EINA_VALUE_STRUCT_MEMBER_SENTINEL {NULL, NULL, 0}
#define EINA_VALUE_STRUCT_OPERATIONS_VERSION (1)
#define EINA_VALUE_TYPE_VERSION (1)
#define EINA_VECTOR2(x, y) ((Eina_Vector2) {(x), (y)})
#define FUNC_ACCESSOR_CLONE(Function)          ((Eina_Accessor_Clone_Callback)Function)
#define FUNC_ACCESSOR_FREE(Function)          ((Eina_Accessor_Free_Callback)Function)
#define FUNC_ACCESSOR_GET_AT(Function)        ((Eina_Accessor_Get_At_Callback)Function)
#define FUNC_ACCESSOR_GET_CONTAINER(Function) ((Eina_Accessor_Get_Container_Callback)Function)
#define FUNC_ACCESSOR_LOCK(Function)          ((Eina_Accessor_Lock_Callback)Function)
#define FUNC_ITERATOR_FREE(Function)          ((Eina_Iterator_Free_Callback)Function)
#define FUNC_ITERATOR_GET_CONTAINER(Function) ((Eina_Iterator_Get_Container_Callback)Function)
#define FUNC_ITERATOR_LOCK(Function)          ((Eina_Iterator_Lock_Callback)Function)
#define FUNC_ITERATOR_NEXT(Function)          ((Eina_Iterator_Next_Callback)Function)
#define MAX(x, y)          (((x) > (y)) ? (x) : (y))
#define MIN(x, y)          (((x) > (y)) ? (y) : (x))
#define _EINA_INLIST_CONTAINER(ref, ptr) (__typeof__(ref))((cstring )(ptr) -
#define _EINA_INLIST_CONTAINER(ref, ptr) (pointer )((cstring )(ptr) -
#define _EINA_INLIST_OFFSET(ref)         ((cstring )&(ref)->__in_list - (cstring )(ref))
#define e_debug(fmt, args...) fprintf(stderr, "%d:"__FILE__":%s/%d : " fmt "n", getpid(), __func__, __LINE__, ##args)
#define e_debug(x...) do { } while (0)
#define e_debug_begin(fmt, args...) fprintf(stderr, "%d:"__FILE__":%s/%d : " fmt "", getpid(), __func__, __LINE__, ##args)
#define e_debug_begin(x...) do { } while (0)
#define e_debug_continue(fmt, args...) fprintf(stderr, fmt, ##args)
#define e_debug_continue(x...) do { } while (0)
#define e_debug_end() fprintf(stderr, "n")
#define e_debug_end(x...) do { } while (0)
#define eina_binshare_add(ptr) eina_binshare_add_length(ptr, sizeof(*ptr))
#define eina_fp32p32_llabs(a) ((a < 0) ? -(a) : (a))
#define eina_future_all(...) eina_future_all_array((Eina_Future *[]){__VA_ARGS__, EINA_FUTURE_SENTINEL})
#define eina_future_cb_console(...) eina_future_cb_console_from_desc((Eina_Future_Cb_Console_Desc){__VA_ARGS__})
#define eina_future_cb_easy(...) eina_future_cb_easy_from_desc((Eina_Future_Cb_Easy_Desc){__VA_ARGS__})
#define eina_future_cb_log_crit(_prefix, _suffix)
#define eina_future_cb_log_dbg(_prefix, _suffix)
#define eina_future_cb_log_err(_prefix, _suffix)
#define eina_future_cb_log_info(_prefix, _suffix)
#define eina_future_cb_log_warn(_prefix, _suffix)
#define eina_future_chain(_prev, ...) eina_future_chain_array(_prev, (Eina_Future_Desc[]){__VA_ARGS__, {.cb = NULL, .data = NULL}})
#define eina_future_chain_easy(_prev, ...) eina_future_chain_easy_array(_prev, (Eina_Future_Cb_Easy_Desc[]) {__VA_ARGS__, {NULL, NULL, NULL, NULL, NULL}})
#define eina_future_race(...) eina_future_race_array((Eina_Future *[]){__VA_ARGS__, EINA_FUTURE_SENTINEL})
#define eina_future_then(_prev, ...) eina_future_then_from_desc(_prev, (Eina_Future_Desc){__VA_ARGS__})
#define eina_future_then_easy(_prev, ...) eina_future_then_from_desc(_prev, eina_future_cb_easy(__VA_ARGS__))
#define eina_magic_fail(d, m, req_m, file, fnx, line) ((void)0)
#define eina_multi_iterator_new(It, ...) eina_multi_iterator_internal_new(It, ##__VA_ARGS__, NULL)
#define eina_promise_all(...) eina_promise_all_array((Eina_Future *[]){__VA_ARGS__, EINA_FUTURE_SENTINEL})
#define eina_promise_race(...) eina_promise_race_array((Eina_Future *[]){__VA_ARGS__, EINA_FUTURE_SENTINEL})
#define eina_str_join_static(dst, sep, a, b) eina_str_join_len(dst, sizeof(dst), sep, a, (sizeof(a) > 0) ? sizeof(a) - 1 : 0, b, (sizeof(b) > 0) ? sizeof(b) - 1 : 0)
#define eina_strbuf_prepend(buf, str) eina_strbuf_insert(buf, str, 0)
#define eina_strbuf_prepend_char(buf, c) eina_strbuf_insert_char(buf, c, 0)
#define eina_strbuf_prepend_escaped(buf, str) eina_strbuf_insert_escaped(buf, str, 0)
#define eina_strbuf_prepend_length(buf, str, length) eina_strbuf_insert_length(buf, str, length, 0)
#define eina_strbuf_prepend_n(buf, str, maxlen) eina_strbuf_insert_n(buf, str, maxlen, 0)
#define eina_strbuf_prepend_printf(buf, fmt, ...) eina_strbuf_insert_printf(buf, fmt, 0, ## __VA_ARGS__)
#define eina_strbuf_prepend_strftime(buf, fmt, tm) eina_strbuf_insert_strftime(buf, fmt, tm, 0)
#define eina_strbuf_prepend_vprintf(buf, fmt, args)  eina_strbuf_insert_vprintf(buf, fmt, 0, args)
#define eina_strbuf_replace_first(buf, str, with) eina_strbuf_replace(buf, str, with, 1)
#define eina_ustrbuf_prepend(buf, str) eina_ustrbuf_insert(buf, str, 0)
#define eina_ustrbuf_prepend_char(buf, c) eina_ustrbuf_insert_char(buf, c, 0)
#define eina_ustrbuf_prepend_escaped(buf, str) eina_ustrbuf_insert_escaped(buf, str, 0)
#define eina_ustrbuf_prepend_length(buf, str, length) eina_ustrbuf_insert_length(buf, str, length, 0)
#define eina_ustrbuf_prepend_n(buf, str, maxlen) eina_ustrbuf_insert_n(buf, str, maxlen, 0)
